// Существует класс А, причем класс А жестко зависит от консоли, так как в методе public void print(Iabc b)
// используется класс System,
// и это, соответственно, является нарушением принципа DIP

public class ClassA {
    private Iabc b;
    public ClassA(Iabc b) {
        this.b = b;
    }
    public void print(Iabc b) {
        System.out.println(b.getS());
    }
}

public interface Iabc {
    String getS();
}

public class ClassB implements Iabc {
    private String s;
    public ClassB(String s) {
        this.s = s;
    }
    @Override
    public String getS() {
        return s;
    }
}



// Решением проблемы является создание интерфейса для вывода информации, и передача реализации
// этого интерфейса в метод через аргумент с дальнейшим использованием

public interface Output {
    void println(Object obj);
}

// теперь класс А не зависит от реализации класса System, так как произведена замена
// использования класса System на реализацию интерфейса (Output output)
public class ClassA {
    private Iabc b;

    public ClassA(Iabc b) {
        this.b = b;
    }

    public void print(Iabc b, Output output) {
        output.println(b.getS());
    }
}