// В данном примере нарушение принципа LSP состоит в том, что в классе-наследнике конструктор присваивает
// переменной name значение в зависимости от значения другой переменной countEngine, что в дальнейшем
// (при разработке нового самолета с 4-мя двигателями) приведет к необходимости изменять код,
// так как нарушено требование о недопустимости усиления предусловий в подклассе

public class Aircraft {
    private String name;
    private int countEngine;

    public Aircraft(String name, int countEngine) {
        this.name = name;
        this.countEngine = countEngine;
    }

    public Aircraft() {
    }

    public void printModel() {
        System.out.println("Метод выводит в консоль модель самолета.");
    }
}

public class Airbus extends Aircraft {
    private String name;
    private int countEngine;

    public Airbus(String name, int countEngine) {
        this.name = name;
        this.countEngine = countEngine;
        if (countEngine == 4) {
            this.name = "A380";
        }
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
        public void printModel() {
            System.out.println("Модель самолета: " + name);
    }

    @Override
    public String toString() {
        return "Airbus{"
                + "name='" + name + '\''
                + '}';
    }
}